name: Build and Release Windows Executable

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.1.0, etc.
  release:
    types: [published, created]
  workflow_dispatch:  # Allows manual trigger from GitHub UI
    inputs:
      version:
        description: 'Version to build (optional)'
        required: false
        default: 'latest'

jobs:
  build-windows-executable:
    name: Build Windows Executable
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # Use stable Python version
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pillow
        
    - name: Create application icon
      run: |
        python -c "
        from PIL import Image, ImageDraw
        import sys
        
        # Create professional icon
        sizes = [16, 32, 48, 64, 128, 256]
        images = []
        
        for size in sizes:
            img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
            draw = ImageDraw.Draw(img)
            
            # Background circle
            margin = max(2, size // 8)
            draw.ellipse([margin, margin, size-margin, size-margin], 
                       fill=(52, 152, 219), outline=(41, 128, 185), width=max(1, size//32))
            
            # Route path
            if size >= 32:
                path_margin = size // 4
                points = [
                    (path_margin, size//2),
                    (size//3, path_margin + size//8),
                    (2*size//3, path_margin + size//8), 
                    (size-path_margin, size//2),
                    (2*size//3, size-path_margin - size//8),
                    (size//3, size-path_margin - size//8)
                ]
                draw.polygon(points, fill=(255, 255, 255, 200))
            
            # Start/end points
            point_size = max(2, size//16)
            draw.ellipse([margin*2, size//2-point_size//2, 
                        margin*2+point_size, size//2+point_size//2], 
                       fill=(231, 76, 60))
            draw.ellipse([size-margin*2-point_size, size//2-point_size//2,
                        size-margin*2, size//2+point_size//2], 
                       fill=(46, 204, 113))
            
            images.append(img)
        
        # Save as ICO
        images[0].save('icon.ico', format='ICO', sizes=[(s, s) for s in sizes], append_images=images[1:])
        print('Icon created successfully')
        "
        
    - name: Create Windows launcher
      run: |
        echo 'import sys; import os; from pathlib import Path
        if hasattr(sys, "_MEIPASS"): bundle_dir = Path(sys._MEIPASS)
        else: bundle_dir = Path(__file__).parent
        sys.path.insert(0, str(bundle_dir))
        
        def main():
            try:
                from main_app import RoutePlannerApp
                app = RoutePlannerApp()
                app.run()
            except Exception as e:
                try:
                    from PyQt5.QtWidgets import QApplication, QMessageBox
                    app = QApplication([])
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setWindowTitle("Route Planner Error")
                    msg.setText(f"Failed to start Route Planner:\n\n{str(e)}")
                    msg.setDetailedText("Please download the latest version from GitHub.")
                    msg.exec_()
                except: 
                    print(f"Error: {e}")
                    input("Press Enter to exit...")
        
        if __name__ == "__main__": main()' > windows_launcher.py
        
    - name: Build executable with PyInstaller
      run: |
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name "RoutePlanner" `
          --icon "icon.ico" `
          --add-data "main_app.py;." `
          --add-data "config.py;." `
          --add-data "README.md;." `
          --add-data "LICENSE;." `
          --hidden-import "PyQt5.QtCore" `
          --hidden-import "PyQt5.QtWidgets" `
          --hidden-import "PyQt5.QtWebEngineWidgets" `
          --hidden-import "folium" `
          --hidden-import "requests" `
          --hidden-import "geopy" `
          --hidden-import "networkx" `
          --hidden-import "numpy" `
          --hidden-import "matplotlib" `
          --hidden-import "urllib3" `
          --hidden-import "certifi" `
          --collect-all "folium" `
          --collect-all "branca" `
          --strip `
          --optimize "2" `
          windows_launcher.py
          
    - name: Verify executable
      run: |
        if (Test-Path "dist\RoutePlanner.exe") {
          $size = (Get-Item "dist\RoutePlanner.exe").Length / 1MB
          Write-Output "‚úÖ Executable created successfully: $([math]::Round($size, 1)) MB"
          
          # Test executable can start (quick test)
          $process = Start-Process -FilePath "dist\RoutePlanner.exe" -PassThru -WindowStyle Hidden
          Start-Sleep -Seconds 3
          if (!$process.HasExited) {
            Stop-Process -Id $process.Id -Force
            Write-Output "‚úÖ Executable starts successfully"
          } else {
            Write-Output "‚ö†Ô∏è Executable exited immediately"
          }
        } else {
          Write-Error "‚ùå Executable not found!"
          exit 1
        }
        
    - name: Create portable package
      run: |
        # Create portable directory
        New-Item -ItemType Directory -Path "dist\RoutePlanner_Portable" -Force
        
        # Copy executable
        Copy-Item "dist\RoutePlanner.exe" "dist\RoutePlanner_Portable\"
        
        # Copy documentation
        $docs = @("README.md", "LICENSE", "CHANGELOG.md")
        foreach ($doc in $docs) {
          if (Test-Path $doc) {
            Copy-Item $doc "dist\RoutePlanner_Portable\"
          }
        }
        
        # Copy docs folder
        if (Test-Path "docs") {
          Copy-Item "docs" "dist\RoutePlanner_Portable\" -Recurse
        }
        
        # Create user-friendly README
        echo "Route Planner - Portable Version" > "dist\RoutePlanner_Portable\README.txt"
        echo "================================" >> "dist\RoutePlanner_Portable\README.txt"
        echo "" >> "dist\RoutePlanner_Portable\README.txt"
        echo "QUICK START:" >> "dist\RoutePlanner_Portable\README.txt"
        echo "Double-click RoutePlanner.exe to start the application." >> "dist\RoutePlanner_Portable\README.txt"
        echo "" >> "dist\RoutePlanner_Portable\README.txt"
        echo "WHAT IS THIS?" >> "dist\RoutePlanner_Portable\README.txt"
        echo "Route Planner helps you find the most efficient routes between multiple locations." >> "dist\RoutePlanner_Portable\README.txt"
        echo "Perfect for delivery drivers, sales teams, or anyone who needs to visit multiple places." >> "dist\RoutePlanner_Portable\README.txt"
        echo "" >> "dist\RoutePlanner_Portable\README.txt"
        echo "FEATURES:" >> "dist\RoutePlanner_Portable\README.txt"
        echo "- Interactive map interface" >> "dist\RoutePlanner_Portable\README.txt"
        echo "- Smart route optimization" >> "dist\RoutePlanner_Portable\README.txt"
        echo "- Multiple algorithm options" >> "dist\RoutePlanner_Portable\README.txt"
        echo "- Works offline after initial setup" >> "dist\RoutePlanner_Portable\README.txt"
        echo "- No installation required" >> "dist\RoutePlanner_Portable\README.txt"
        echo "" >> "dist\RoutePlanner_Portable\README.txt"
        echo "SUPPORT: https://github.com/yammanhammad/Route_Planner" >> "dist\RoutePlanner_Portable\README.txt"
        
    - name: Create ZIP package
      run: |
        # Get version from tag or use default
        $version = "${{ github.ref_name }}" -replace '^v', ''
        if (!$version -or $version -eq "master") { $version = "1.0.0" }
        
        # Create ZIP file
        $zipName = "RoutePlanner-$version-Windows-Portable.zip"
        Compress-Archive -Path "dist\RoutePlanner_Portable\*" -DestinationPath "dist\$zipName" -Force
        
        # Get file size
        $size = (Get-Item "dist\$zipName").Length / 1MB
        Write-Output "‚úÖ Portable package created: $zipName ($([math]::Round($size, 1)) MB)"
        
        # Set output for next step
        echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
        echo "VERSION=$version" >> $env:GITHUB_ENV
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: |
          dist/RoutePlanner.exe
          dist/RoutePlanner-*-Windows-Portable.zip
        retention-days: 30
        
    - name: Upload to release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/RoutePlanner.exe
          dist/RoutePlanner-*-Windows-Portable.zip
        body: |
          ## üñ±Ô∏è Windows Executable Available!
          
          **For Windows Users (No Python Required):**
          - Download `RoutePlanner-${{ env.VERSION }}-Windows-Portable.zip`
          - Extract anywhere on your computer
          - Double-click `RoutePlanner.exe` to start!
          
          **Benefits:**
          ‚úÖ No Python installation needed
          ‚úÖ No command line required
          ‚úÖ Works on Windows 7/8/10/11
          ‚úÖ Portable - runs from any location
          
          Built automatically with GitHub Actions on Windows Server 2022.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  # Optional: Build for other platforms
  build-cross-platform:
    name: Build Cross-Platform Packages
    runs-on: ubuntu-latest
    needs: build-windows-executable  # Wait for Windows build first
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build wheel
        
    - name: Build Python packages
      run: |
        python -m build
        
    - name: Upload Python packages to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.tar.gz
          dist/*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
